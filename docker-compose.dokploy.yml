version: '3.8'

services:
  # Main Application Container
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: php-base
    container_name: pms_app
    restart: unless-stopped
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - pms_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL:-http://localhost}
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-property_management}
      - DB_USERNAME=${DB_USERNAME:-pms_user}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute", "echo 'OK';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database Container - Optimized for Dokploy
  db:
    image: mysql:8.0
    container_name: pms_database
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-property_management}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_USER: ${DB_USERNAME:-pms_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
      # Force MySQL initialization
      MYSQL_RANDOM_ROOT_PASSWORD: "no"
      MYSQL_ONETIME_PASSWORD: "no"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - pms_network
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=128M
      --innodb-log-file-size=32M
      --innodb-flush-log-at-trx-commit=2
      --innodb-flush-method=O_DIRECT_NO_FSYNC
      --skip-name-resolve
      --max-connections=100
      --wait-timeout=28800
      --interactive-timeout=28800
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-secret}"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Redis Container
  redis:
    image: redis:7-alpine
    container_name: pms_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pms_network
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: pms_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app_public:/var/www/html/public:ro
      - nginx_config:/etc/nginx/conf.d
    networks:
      - pms_network
    depends_on:
      app:
        condition: service_healthy

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: php-base
    container_name: pms_queue
    restart: unless-stopped
    volumes:
      - app_storage:/var/www/html/storage
      - app_cache:/var/www/html/bootstrap/cache
    networks:
      - pms_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_DATABASE=${DB_DATABASE:-property_management}
      - DB_USERNAME=${DB_USERNAME:-pms_user}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    command: php artisan queue:work --sleep=3 --tries=3 --timeout=90 --daemon

networks:
  pms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_cache:
    driver: local
  app_public:
    driver: local
  nginx_config:
    driver: local
