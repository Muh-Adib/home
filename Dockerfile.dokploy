# Multi-stage Dockerfile untuk Dokploy Laravel App
# Optimized untuk Property Management System dengan Redis dan DB terpisah

# Build stage untuk Node.js dependencies dan assets
FROM node:20-alpine AS node-builder

WORKDIR /app

# Install git untuk dependencies yang memerlukan
RUN apk add --no-cache git

# Copy package files untuk better layer caching
COPY package*.json ./

# Check files dan install Node dependencies dengan error handling
RUN echo "=== Checking package files ===" && \
    ls -la package* && \
    echo "=== Installing Node dependencies ===" && \
    npm cache clean --force && \
    npm ci --legacy-peer-deps --verbose || npm install --legacy-peer-deps --verbose

# Copy konfigurasi build files
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.js ./
COPY components.json ./

# Copy source code untuk building
COPY resources/ ./resources/
COPY public/ ./public/

# Build frontend assets
RUN echo "=== Building frontend assets ===" && \
    npm run build && \
    echo "=== Build completed ===" && \
    ls -la public/build/

# Production PHP stage
FROM php:8.3-fpm-alpine

# Install system dependencies (tanpa Redis karena akan menggunakan external Redis)
RUN apk add --no-cache \
    nginx \
    supervisor \
    curl \
    wget \
    bash \
    git \
    netcat-openbsd \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    libzip-dev \
    zip \
    unzip \
    icu-dev \
    oniguruma-dev \
    mysql-client \
    postgresql-client \
    postgresql-dev \
    autoconf \
    g++ \
    make \
    pcre-dev

# Install PHP extensions yang diperlukan
RUN docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j$(nproc) \
        pdo_mysql \
        pdo_pgsql \
        mbstring \
        exif \
        pcntl \
        bcmath \
        gd \
        zip \
        intl \
        opcache

# Install Redis extension untuk koneksi ke external Redis
RUN pecl install redis && \
    docker-php-ext-enable redis && \
    php -m | grep redis

# Clean up build tools
RUN apk del autoconf g++ make pcre-dev postgresql-dev

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create application user
RUN addgroup -g 1000 www && \
    adduser -u 1000 -G www -s /bin/sh -D www

# Set working directory
WORKDIR /var/www/html

# Copy application code dengan proper ownership
COPY --chown=www:www . .

# Copy built assets dari node stage
COPY --from=node-builder /app/public/build ./public/build

# Install PHP dependencies (production optimized)
RUN composer install \
    --no-dev \
    --optimize-autoloader \
    --no-interaction \
    --no-progress \
    --prefer-dist && \
    composer dump-autoload --optimize

# Create required directories dengan proper permissions
RUN mkdir -p \
    storage/logs \
    storage/framework/cache \
    storage/framework/sessions \
    storage/framework/views \
    storage/app/public \
    bootstrap/cache \
    /var/log/supervisor \
    /var/log/nginx \
    /var/cache/nginx \
    /var/run/php && \
    chown -R www:www storage bootstrap/cache && \
    chmod -R 755 storage bootstrap/cache

# Copy optimized configuration files
COPY docker/nginx/dokploy.conf /etc/nginx/http.d/default.conf
COPY docker/supervisor/dokploy.conf /etc/supervisor.d/supervisord.conf
COPY docker/php/dokploy.ini /usr/local/etc/php/conf.d/custom.ini

# Setup environment template (dynamic configuration akan dilakukan di startup)
RUN if [ ! -f .env ]; then cp .env.example .env; fi && \
    echo "=== Preparing environment template for dynamic configuration ===" && \
    echo "# Environment will be configured dynamically at startup" >> .env && \
    echo "# APP_URL, DB_*, REDIS_* akan di-set dari environment variables" >> .env

# Generate application key
RUN php artisan key:generate --force || echo "Key generation skipped"

# Optimize Laravel untuk production dengan error handling
RUN echo "=== Optimizing Laravel for production ===" && \
    php artisan config:cache || echo "Config cache failed, continuing..." && \
    php artisan route:cache || echo "Route cache failed, continuing..." && \
    php artisan view:cache || echo "View cache failed, continuing..." && \
    php artisan event:cache || echo "Event cache failed, continuing..."

# Create storage link
RUN php artisan storage:link || echo "Storage link failed, continuing..."

# Set final permissions
RUN chown -R www:www /var/www/html && \
    chmod -R 755 /var/www/html/storage && \
    chmod -R 755 /var/www/html/bootstrap/cache && \
    chmod +x /var/www/html/artisan

# Create startup script untuk handle migrations dan seeding
COPY docker/scripts/startup.sh /usr/local/bin/startup.sh
RUN chmod +x /usr/local/bin/startup.sh

# Expose HTTP port only (tidak perlu WebSocket jika terpisah)
EXPOSE 80

# Health check untuk application readiness
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start dengan startup script yang akan handle migrations
CMD ["/usr/local/bin/startup.sh"]